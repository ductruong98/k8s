
#######################################
sudo cp /etc/kubernetes/admin.conf $HOME/
sudo chown $(id -u):$(id -g) $HOME/admin.conf
export KUBECONFIG=$HOME/admin.conf
#########################################
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


#Set hostname và khởi tạo cho các con master
hostnamectl set-hostname master1,2,3
----
#install cfssl để tạo certificate
1- Download the binaries.
$ wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
$ wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64

2- Add the execution permission to the binaries.
$ chmod +x cfssl*

3- Move the binaries to /usr/local/bin
$ sudo mv cfssl_linux-amd64 /usr/local/bin/cfssl
$ sudo mv cfssljson_linux-amd64 /usr/local/bin/cfssljson

4- Verify the installation.
$ cfssl version

//-------
#Thực hiện trên HA Proxy
#Installing the HAProxy load balancer
$ sudo apt-get install haproxy

1- Configure HAProxy to load balance the traffic between the three Kubernetes master nodes.
/*
$ sudo nano /etc/haproxy/haproxy.cfg
global
...
default
...
frontend kubernetes
bind $IP_Loadbalancer:6443
option tcplog
mode tcp
default_backend kubernetes-master-nodes


backend kubernetes-master-nodes
mode tcp
balance roundrobin
option tcp-check
server k8s-master-0 10.0.6.56:6443 check fall 3 rise 2
server k8s-master-1 10.0.6.57:6443 check fall 3 rise 2
server k8s-master-2 10.0.6.58:6443 check fall 3 rise 2
*/

2. Restart HAProxy
$ sudo systemctl restart haproxy
--------
# Generating the TLS certificates
1- Create the certificate authority configuration file.
/*
$ nano ca-config.json
{
  "signing": {
    "default": {
      "expiry": "8760h"
    },
    "profiles": {
      "kubernetes": {
        "usages": ["signing", "key encipherment", "server auth", "client auth"],
        "expiry": "8760h"
      }
    }
  }
}
*/
2- Create the certificate authority signing request configuration file.

/*
$ nano ca-csr.json
{
  "CN": "Kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
  {
    "C": "IE",
    "L": "Cork",
    "O": "Kubernetes",
    "OU": "CA",
    "ST": "Cork Co."
  }
 ]
}
*/
3- Generate the certificate authority certificate and private key.
$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca
4- Verify that the ca-key.pem and the ca.pem were generated.
$ ls -la
-----
# Creating the certificate for the Etcd cluster
1- Create the certificate signing request configuration file.
/*
$ nano kubernetes-csr.json
{
  "CN": "kubernetes",
  "key": {
    "algo": "rsa",
    "size": 2048
  },
  "names": [
  {
    "C": "IE",
    "L": "Cork",
    "O": "Kubernetes",
    "OU": "Kubernetes",
    "ST": "Cork Co."
  }
 ]
}
*/
2- Generate the certificate and private key.

/*
$ cfssl gencert \
-ca=ca.pem \
-ca-key=ca-key.pem \
-config=ca-config.json \
-hostname=10.0.6.56,10.0.6.57,10.0.6.58,10.0.6.112,127.0.0.1,kubernetes.default \
-profile=kubernetes kubernetes-csr.json | \
cfssljson -bare kubernetes
*/

3- Verify that the kubernetes-key.pem and the kubernetes.pem file were generated.
$ ls -la
4- Copy the certificate to each nodes.

$ scp ca.pem kubernetes.pem kubernetes-key.pem adminstrator@10.0.6.56:~
$ scp ca.pem kubernetes.pem kubernetes-key.pem adminstrator@10.0.6.57:~
$ scp ca.pem kubernetes.pem kubernetes-key.pem adminstrator@10.0.6.58:~
$ scp ca.pem kubernetes.pem kubernetes-key.pem adminstrator@10.0.6.52:~
$ scp ca.pem kubernetes.pem kubernetes-key.pem adminstrator@10.0.6.53:~


-------//


//------
THỰC HIỆN TRÊN CÁC CON MASTER VÀ WORKER:
$ sudo -s
# curl -fsSL https://get.docker.com -o get-docker.sh
# sh get-docker.sh
# usermod -aG docker administrator (your user)
 --- Installing kubeadm, kublet, and kubectl---
# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
# nano /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io kubernetes-xenial main
# apt-get update
# apt-get install kubelet kubeadm kubectl
# swapoff -a
# sed -i '/ swap / s/^/#/' /etc/fstab

---------//

//-------
THỰC HIỆN TRÊN CÁC CON MASTER ĐỂ CÀI ĐẶT VÀ CẤU HÌNH ETCD CLUSTER:
$ sudo mkdir /etc/etcd /var/lib/etcd
$ sudo mv ~/ca.pem ~/kubernetes.pem ~/kubernetes-key.pem /etc/etcd
$ wget https://github.com/etcd-io/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz
$ tar xvzf etcd-v3.3.13-linux-amd64.tar.gz
$ sudo mv etcd-v3.3.13-linux-amd64/etcd* /usr/local/bin/

-----Create an etcd systemd unit file.---
$ sudo nano /etc/systemd/system/etcd.service
/*
[Unit]
Description=etcd
Documentation=https://github.com/coreos


[Service]
Type=notify
ExecStart=/usr/local/bin/etcd \
  --name $IP_Master1 \
  --cert-file=/etc/etcd/kubernetes.pem \
  --key-file=/etc/etcd/kubernetes-key.pem \
  --peer-cert-file=/etc/etcd/kubernetes.pem \
  --peer-key-file=/etc/etcd/kubernetes-key.pem \
  --trusted-ca-file=/etc/etcd/ca.pem \
  --peer-trusted-ca-file=/etc/etcd/ca.pem \
  --peer-client-cert-auth \
  --client-cert-auth \
  --initial-advertise-peer-urls https://$IP_Master1:2380 \
  --listen-peer-urls https://$IP_Master1:2380 \
  --listen-client-urls https://$IP_Master1:2379,http://127.0.0.1:2379 \
  --advertise-client-urls https://$IP_Master1:2379 \
  --initial-cluster-token etcd-cluster-0 \
  --initial-cluster $IP_Master1=https://$IP_Master1:2380,$IP_Master2=https://$IP_Master2:2380,$IP_Master3=https://$IP_Master3:2380 \
  --initial-cluster-state new \
  --data-dir=/var/lib/etcd
Restart=on-failure
RestartSec=5


[Install]
WantedBy=multi-user.target
*/

$ sudo systemctl daemon-reload
$ sudo systemctl enable etcd
$ sudo systemctl start etcd
-----Verify that the cluster is up and running.----
$ ETCDCTL_API=3 etcdctl member list
Làm tương tự trên con master còn lại và thay thế địa chỉ IP

------Initializing the master nodes 1-----
$ nano config.yaml
/*
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: stable
apiServerCertSANs:
- 10.0.6.112
controlPlaneEndpoint: "10.0.6.112:6443"
etcd:
  external:
    endpoints:
    - https://10.0.6.56:2379
    - https://10.0.6.57:2379
    - https://10.0.6.58:2379
    caFile: /etc/etcd/ca.pem
    certFile: /etc/etcd/kubernetes.pem
    keyFile: /etc/etcd/kubernetes-key.pem
networking:
  podSubnet: 10.30.0.0/24
apiServerExtraArgs:
  apiserver-count: "3"
*/
$ sudo kubeadm init --config=config.yaml

-----Copy the certificates to the two other masters.---
$ sudo scp -r /etc/kubernetes/pki administrator@10.0.6.57:~
$ sudo scp -r /etc/kubernetes/pki administrator@10.0.6.58:~

----Initializing the 2nd master node and 3thd master node-----
$ rm ~/pki/apiserver.*
$ sudo mv ~/pki /etc/kubernetes/

$ nano config.yaml
/*
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: stable
apiServerCertSANs:
- 10.0.6.112
controlPlaneEndpoint: "10.0.6.112:6443"
etcd:
  external:
    endpoints:
    - https://10.0.6.56:2379
    - https://10.0.6.57:2379
    - https://10.0.6.58:2379
    caFile: /etc/etcd/ca.pem
    certFile: /etc/etcd/kubernetes.pem
    keyFile: /etc/etcd/kubernetes-key.pem
networking:
  podSubnet: 10.30.0.0/24
apiServerExtraArgs:
  apiserver-count: "3"
*/

$ sudo kubeadm init --config=config.yaml



scp /etc/kubernetes/admin.conf administrator@10.0.6.52:~
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
